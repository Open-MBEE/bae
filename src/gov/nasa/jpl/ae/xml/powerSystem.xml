<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<scenario xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="eventSchema.xsd">
  <epoch>2012-08-05T23:30:00-07:00</epoch>
  <timeUnits>seconds</timeUnits>
  <eventToBeExecuted>
    <eventType>
      PowerSystem
    </eventType>
    <arguments>
      <parameter><name>startTime</name><type>Integer</type><value>0</value></parameter>
     </arguments>
  </eventToBeExecuted>
  <events>
    <event>
      <class>
        <name>
          PowerSystem
        </name>
        <members>
          <parameter><name>DREventStartTime</name><type>Integer</type><value></value></parameter>
          <parameter><name>DRState</name><type>TimeVaryingMap&lt; String &gt;</type><value>new TimeVaryingMap&lt; String &gt;("")</value></parameter>
          <parameter><name>DRState</name><type>TimeVaryingMap&lt; String &gt;</type><value>DRState</value></parameter>
        </members>
        <constraints></constraints>
        <dependencies></dependencies>
        </class>
      <effects>
        <!--<effect>DRState.set(startTime,getName())</effect>-->
      </effects>
      <elaborations>
        <elaboration>
          <eventInvocation>
            <eventType>Customer</eventType>
            <!-- A "value" specified here is in the scope of PowerSystem and are dependencies (not just initializations), so if the value changes in PowerSystem, the dependent variable in Customer is reassigned. -->
            <arguments>
              <parameter><name>startTime</name><type>Integer</type><value>startTime</value></parameter>
              <parameter><name>DRState</name><type>TimeVaryingMap&lt; String &gt;</type><value>DRState</value></parameter>
            </arguments>
          </eventInvocation>
          <condition><expression>true</expression></condition>
        </elaboration>
        <elaboration>
          <eventInvocation>
            <eventType>AssessDRCommitmentEvent</eventType>
            <arguments>
              <parameter><name>startTime</name><type>Integer</type><value>startTime + assessEventStartTime</value></parameter>
              <!-- The duration could be uncontrollable/uncertain, but we are hardcoding it for now. -->
              <!--<parameter><name>duration</name><type>Integer</type><value>200</value></parameter>-->
              <parameter><name>DREventStartTime</name><type>Integer</type><value>DREventStartTime</value></parameter>
              <parameter><name>DREventEndTime</name><type>Integer</type><value>DREventEndTime</value></parameter>
              <parameter><name>DRArea</name><type>String</type><value>DRArea</value></parameter>
              <parameter><name>LoadReductionNeeded</name><type>Double</type><value>LoadReductionNeeded</value></parameter>
              <!-- The loadReductionProjectedBasedOnResponses is hardcoded for now as 0 to represent an attack blackholes the responses. -->
              <parameter><name>loadReductionProjectedBasedOnResponses</name><type>Double</type><value>loadReductionProjectedBasedOnResponses</value></parameter>
              <!--<parameter><name>lastDREventStartTime</name><type>Integer</type><value>lastDREventStartTime</value></parameter>-->
              <parameter><name>maxNumTimesReplan</name><type>Integer</type><value>maxNumTimesReplan</value></parameter>
              <parameter><name>DRState</name><type>TimeVaryingMap&lt; String &gt;</type><value>DRState</value></parameter>
            </arguments>
          </eventInvocation>
          <condition><expression>true</expression></condition>
        </elaboration>
        <elaboration>
          <eventInvocation>
            <eventType>
              ControlRealTimeLoadReductionEvent
            </eventType>
            <arguments>
              <parameter><name>startTime</name><type>Integer</type><value>DREventStartTime</value></parameter>
              <parameter><name>endTime</name><type>Integer</type><value>DREventEndTime</value></parameter>
              <parameter><name>DREventStartTime</name><type>Integer</type><value>DREventStartTime</value></parameter>
              <parameter><name>DREventEndTime</name><type>Integer</type><value>DREventEndTime</value></parameter>
              <parameter><name>DRArea</name><type>String</type><value>DRArea</value></parameter>
              <parameter><name>LoadReductionNeeded</name><type>Double</type><value>LoadReductionNeeded</value></parameter>
              <parameter><name>loadReductionActual</name><type>Double</type><value>loadReductionActual</value></parameter>
              <parameter><name>projectedLoadReduction</name><type>Double</type><value>loadReductionProjectedBasedOnResponses</value></parameter>
              <parameter><name>DRState</name><type>TimeVaryingMap&lt; String &gt;</type><value>DRState</value></parameter>
            </arguments>
          </eventInvocation>
          <condition><expression>true</expression></condition>
        </elaboration>
      </elaborations>
    </event>
    <event>
      <class>
        <name>
          GenerateDRRequest
        </name>
        <inheritsFrom>DREvent</inheritsFrom>
        <members></members>
        <constraints>
          <constraint><expression>DREventStartTime >= endTime</expression></constraint>
        </constraints>
        <methods></methods>
        <dependencies>
          <dependency><name>duration</name><type>Integer</type><value>100</value></dependency>
        </dependencies>
      </class>
      <effects></effects>
      <elaborations></elaborations>
    </event>
    <event>
      <class>
        <name>
          AssessDRCommitmentEvent
        </name>
        <inheritsFrom>DREvent</inheritsFrom>
        <members>
          <parameter><name>loadReductionProjectedBasedOnResponses</name><type>Double</type></parameter>
          <parameter><name>loadReductionSufficient</name><type>Boolean</type></parameter>
          <!--<parameter><name>lastDREventStartTime</name><type>Integer</type><value>2400</value></parameter>-->
          <parameter><name>maxNumTimesReplan</name><type>Integer</type><value>2</value></parameter>
        </members>
        <constraints>
          <constraint><expression>DREventStartTime >= endTime</expression></constraint>
        </constraints>
        <methods></methods>
        <dependencies>
          <dependency>
            <!-- The duration could be uncontrollable/uncertain, but we are hardcoding it for now. -->
            <name>duration</name><type>Integer</type><value>200</value>
          </dependency>
          <dependency>
            <name>loadReductionSufficient</name><type>Boolean</type>
            <value>LoadReductionNeeded - loadReductionProjectedBasedOnResponses > 500.0</value>
          </dependency>
        </dependencies>
      </class>
      <effects></effects>
      <elaborations>
        <elaboration>
          <eventInvocation>
            <eventType>
              PlanAndControlLoadReductionEvent
            </eventType>
            <arguments>
              <!-- This is redundant with a precedence constraint defined above -->
              <parameter><name>startTime</name><type>Integer</type><value>endTime</value></parameter>
              <!-- Could allow a different event start/end. -->
              <parameter><name>DREventStartTime</name><type>Integer</type><value>DREventStartTime</value></parameter>
              <parameter><name>DREventEndTime</name><type>Integer</type><value>DREventEndTime</value></parameter>
              <!-- A new area should be selected. -->
              <!--<parameter><name>DRArea</name><type>String</type><value>"Area 54"</value></parameter>-->
              <!-- Compute the additional load to reduce. -->
              <parameter><name>LoadReductionNeeded</name><type>Double</type><value>LoadReductionNeeded - loadReductionProjectedBasedOnResponses</value></parameter>
              <!--<parameter><name>lastDREventStartTime</name><type>Integer</type><value>DREventStartTime</value></parameter>-->
              <!-- Decrement replan count. -->
              <parameter><name>maxNumTimesReplan</name><type>Integer</type><value>maxNumTimesReplan-1</value></parameter>
              <parameter><name>DRState</name><type>TimeVaryingMap&lt; String &gt;</type><value>DRState</value></parameter>
            </arguments>
          </eventInvocation>
          <condition>
            <!-- &amp = '&' = #x0026 from http://en.wikipedia.org/wiki/UTF-8#Codepage_layout -->
            <expression>maxNumTimesReplan > 0 &amp;&amp; !loadReductionSufficient</expression>
          </condition>
        </elaboration>
      </elaborations>
    </event>
    <event>
      <class>
        <name>
          ControlRealTimeLoadReductionEvent
        </name>
        <inheritsFrom>DREvent</inheritsFrom>
        <members>
          <parameter><name>loadReductionActual</name><type>Double</type></parameter>
          <parameter><name>projectedLoadReduction</name><type>Double</type><value>1000.0</value></parameter>
          <parameter><name>increaseGeneration</name><type>Boolean</type><value>false</value></parameter>
          <parameter><name>increasedGeneration</name><type>Double</type><value>0.0</value></parameter>
          <parameter><name>amountToIncrease</name><type>Double</type><value>1000.0</value></parameter>
        </members>
        <constraints>
          <constraint><expression>LoadReductionNeeded - loadReductionActual &lt;= 500.0</expression></constraint>
        </constraints>
        <dependencies>
          <!-- Again, hardcoding uncontrollable/uncertain value. -->
          <!--<dependency><name>loadReductionActual</name><type>Double</type><value>1000.0</value></dependency>-->
          <!-- TODO: optionally elaborate into IncreaseGeneration. -->
          <dependency><name>increasedGeneration</name><type>Double</type><value>0.0</value></dependency>
        </dependencies>
      </class>
      <!-- TODO: optionally elaborate into IncreaseGeneration. -->
      <elaborations></elaborations>
    </event>
    <event>
      <class>
        <name>
          IncreaseGeneration
        </name>
        <members>
          <parameter><name>amountToIncrease</name><type>Double</type><value>1000.0</value></parameter>
        </members>
        <constraints>
          <!-- '<' = #x003C from http://en.wikipedia.org/wiki/UTF-8#Codepage_layout -->
          <constraint><expression>amountToIncrease &lt; 2000.0</expression></constraint>
          <constraint><expression>amountToIncrease &gt;= 500.0</expression></constraint>
        </constraints>
        <dependencies></dependencies>
      </class>
    </event>
  </events>
  <classes>
    <!--<class>
      <name>EnumState</name>
      <inheritsFrom>gov.nasa.jpl.ae.event.TimeVaryingMap&lt; String &gt;</inheritsFrom>
      <members>
        --><!--<parameter><name>state</name><type>String</type><value>""</value></parameter>--><!--
      </members>
      <methods>
        --><!--<function>
          public boolean set(Timepoint t, String value) {
            put( t, value );
          }
        </function>--><!--
      </methods>
    </class>-->
  </classes>
</scenario>

