  // Utility XML DOM helpers

  // Return the first child of node that has the name of childTag.
  protected static Node getChildNode( Node node, String childTag ) {
    if ( node == null ) return null;
    NodeList nodeList = node.getChildNodes();
    for ( int i = 0; i < nodeList.getLength(); i++ ) {
      Node childNode = nodeList.item( i );
      if ( childNode != null && childNode.getLocalName() != null
           && childNode.getLocalName().equals( childTag ) ) {
        return childNode;
      }
    }
    return null;
  }

  // Return a the children of node that have a name of childTag.
  protected static List< Node > getChildNodes( Node node, String childTag ) {
    ArrayList< Node > nodes = new ArrayList< Node >();
    if ( node == null ) return nodes;
    NodeList nodeList = node.getChildNodes();
    for ( int i = 0; i < nodeList.getLength(); i++ ) {
      Node childNode = nodeList.item( i );
      if ( childNode != null && childNode.getLocalName() != null
           && childNode.getLocalName().equals( childTag ) ) {
        nodes.add( childNode );
      }
    }
    return nodes;
  }

  // Return the text content of the first child of node that has the name of
  // childTag.
  protected static String getChildElementText( Node node, String childTag ) {
    if ( node == null ) return null;
    Node n = getChildNode( node, childTag );
    if ( n != null ) return n.getTextContent().trim();
    return null;
  }

  // Return the text content of all children of node that have the name of
  // childTag.
  protected static List< String > getChildrenElementText( Node node,
                                                          String childTag ) {
    ArrayList< String > stringList = new ArrayList< String >();
    if ( node == null ) return stringList;
    List< Node > list = getChildNodes( node, childTag );
    for ( Node n : list ) {
      if ( n != null ) stringList.add( n.getTextContent().trim() );
    }
    return stringList;
  }

  // Recursively find all nodes in the tree from root with a local name of tag.
  protected static List< Node > findNodes( Node root, String tag ) {
    List< Node > nodes = new ArrayList< Node >();
    if ( root != null && root.getLocalName() != null
         && root.getLocalName().equals( tag ) ) {
      nodes.add( root );
    }
    NodeList nodeList = root.getChildNodes();
    for ( int i = 0; i < nodeList.getLength(); i++ ) {
      Node childNode = nodeList.item( i );
      nodes.addAll( findNodes( childNode, tag ) );
    }
    return nodes;
  }

  // Return the first discovered node in the tree from root with a local name of
  // tag.
  protected static Node findNode( Node root, String tag ) {
    if ( root != null && root.getLocalName() != null
         && root.getLocalName().equals( tag ) ) {
      return root;
    }
    NodeList nodeList = root.getChildNodes();
    for ( int i = 0; i < nodeList.getLength(); i++ ) {
      Node childNode = nodeList.item( i );
      Node firstNode = findNode( childNode, tag );
      if ( firstNode != null ) {
        return firstNode;
      }
    }
    return null;
  }

  // Return the text content of the first discovered node that has the name of
  // childTag.
  protected static String findElementText( Node node, String childTag ) {
    if ( node == null ) return null;
    Node n = findNode( node, childTag );
    if ( n != null ) return n.getTextContent().trim();
    return null;
  }

  // Return the text content of the all nodes that have the name of
  // childTag.
  protected static List< String > findElementsText( Node node,
                                                           String childTag ) {
    ArrayList< String > stringList = new ArrayList< String >();
    if ( node == null ) return stringList;
    List< Node > list = findNodes( node, childTag );
    for ( Node n : list ) {
      if ( n != null ) stringList.add( n.getTextContent().trim() );
    }
    return stringList;
  }


